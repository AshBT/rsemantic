h1. Rsemantic

A document vector search with flexible matrix transforms for Ruby. Currently supports: 

* Latent semantic analysis
* Term frequency - inverse document frequency

h2. Usage

<pre><code>
documents = ["The cat in the hat disabled", 
             "A cat is a fine pet ponies.", 
             "Do and cats make good pets.",
             "I haven't got a hat."]

#Log to stdout how the matrix gets built and transformed
search = Semantic::Search.new(documents, :verbose => true)

#We can pass different transforms to be performed. 
#Currently only :LSA and :TFIDF. 
#The order of transforms reflects the order they will be performed on the matrix
search = Semantic::Search.new(documents, :transforms => [:LSA])

#Defaults to performing :TFIDF and then :LSA
search = Semantic::Search.new(documents)

#Find documents that are related to documents[0] with a ranking for how related they are.
puts search.related(0)

#Search documents for the word cat. Returns a ranking for how relevant the matches where for each document.
puts search.search(["cat"])
</code></pre>

h2. Rake Examples

There are some pre-built examples that can be run through rake. They all operate in verbose mode so you can see whats going on.

<pre><code>
rake example:lsa

rake example:vector_space
</code></pre>

h2. Adding Transforms

I'm still working on making it easier to add matrix transforms. At the moment they are too embedded in the code. Until then if your are keen to add new transforms you can do the following:

All matrix transforms live in:

rsemantic/lib/semantic/transform/*

Add a new class for your transform here. It requires a single class method which is passed a matrix and it should return a matrix.  

The matrix is a "Linalg::DMatrix":http://linalg.rubyforge.org/classes/Linalg/DMatrix.html object.

It offers some nice builtin matrix transforms.

So as an example adding a PLSA transform our class would look like this:

<pre><code>
module Semantic
  module Transform
    class PLSA

      self.transform(matrix)
        matrix
      end      

    end
  end
end
</code></pre>

And then to use the transform we pass the class name in as a symbol when creating the search object.

<pre><code>
search = Semantic::Search.new(documents, :transforms => [:PLSA])
</code></pre>

h2. Dependencies

* linalg - "http://rubyforge.org/projects/linalg/":http://rubyforge.org/projects/linalg/
** LAPACK
*** Building on Mac OS X "http://www.commonmediainc.com/2008/03/24/building-lapack-and-rubys-linalg-on-mac-os-x/":http://www.commonmediainc.com/2008/03/24/building-lapack-and-rubys-linalg-on-mac-os-x/

h2. LICENSE

(The MIT License)

Copyright (c) 2008 Joseph Wilk

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

